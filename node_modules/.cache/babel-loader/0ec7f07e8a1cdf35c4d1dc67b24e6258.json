{"ast":null,"code":"var _jsxFileName = \"/Users/bruceqin/Desktop/CS4476/project-one/src/pages/Proposal/Proposal.js\";\nimport React from 'react';\nimport { Typography, Box } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Header } from '../../components'; //import { Link } from 'react-router-dom';\n\nconst useStyles = makeStyles(theme => ({\n  wrapper: {\n    display: 'flex',\n    alignItems: 'center',\n    flexDirection: 'column',\n    paddingTop: '20px'\n  },\n  link: {\n    textDecoration: 'none',\n    color: '#000'\n  },\n  titleFormat: {\n    paddingBottom: '10px',\n    textDecoration: \"none\",\n    color: '#212F3C' //fontFamily: '-apple-system',\n\n  },\n  lateTitleFormat: {\n    paddingTop: '20px',\n    paddingBottom: '10px',\n    textDecoration: \"none\",\n    color: '#212F3C' //fontFamily: '-apple-system',\n\n  },\n  titleParagraphFormat: {\n    fontFamily: '-apple-system',\n    paddingBottom: '10px'\n  },\n  boxFormat: {\n    width: '80%',\n    paddingBottom: '30px'\n  }\n}));\n\nconst Proposal = ({\n  tagChange\n}) => {\n  const classes = useStyles(); //const theme = useTheme();\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.wrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Box, {\n    className: classes.boxFormat,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    align: \"center\",\n    variant: \"h4\",\n    className: classes.titleFormat,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }, \"Problem Statement\"), /*#__PURE__*/React.createElement(Typography, {\n    align: \"left\",\n    variant: \"subtitle1\",\n    className: classes.titleParagraphFormat,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }, \"When someone uses our system, they are expected to input images of house numbers displayed on streets. These images should be taken from a camera, or extracted from Google street view, with random background and diverse colors, but have the house numbers locating in the middle. The desired output is the same image with detected house numbers labeled besides the actual house numbers.\"), /*#__PURE__*/React.createElement(Typography, {\n    align: \"center\",\n    variant: \"h4\",\n    className: classes.lateTitleFormat,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }, \"Approach\"), /*#__PURE__*/React.createElement(Typography, {\n    align: \"left\",\n    variant: \"h6\",\n    className: classes.titleParagraphFormat,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, \"Image Processing Techniques:\"), /*#__PURE__*/React.createElement(Typography, {\n    align: \"left\",\n    variant: \"subtitle1\",\n    className: classes.titleParagraphFormat,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }, \"\\xA0 \\xA0 - Convert the input image into a grayscale image \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 76\n    }\n  }), \"\\xA0 \\xA0 - Adjust lighting into desired condition in the image \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 81\n    }\n  }), \"\\xA0 \\xA0 - Denoise from the image \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 52\n    }\n  }), \"\\xA0 \\xA0 - Use the canny edge detector to detect the edges \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 77\n    }\n  }), \"\\xA0 \\xA0 - Normalising intensity of data through mean subtraction \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 84\n    }\n  }), \"\\xA0 \\xA0 - Experiment with different types of contrast normalisation (global, local) \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 103\n    }\n  }), \" \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 113\n    }\n  })), /*#__PURE__*/React.createElement(Typography, {\n    align: \"left\",\n    variant: \"h6\",\n    className: classes.titleParagraphFormat,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, \" Scene Text Detection:\"), /*#__PURE__*/React.createElement(Typography, {\n    align: \"left\",\n    variant: \"subtitle1\",\n    className: classes.titleParagraphFormat,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }, \"\\xA0 \\xA0 - The dataset comes in two different formats from SVHN: \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 83\n    }\n  }), \"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 - Images with character level bounding boxes \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 100\n    }\n  }), \"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 - 32-by-32 images centered around single character \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 106\n    }\n  }), \"\\xA0 \\xA0 - For images that do not have a bounding box, use YOLO to find the text box with a single neural network to predict \\xA0 \\xA0 \\xA0 \\xA0 \\xA0\\xA0 \\xA0 \\xA0 \\xA0bounding boxes and label the bounding boxes  \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 249\n    }\n  }), \"\\xA0 \\xA0 - After the bounding boxes are determined, crop the image into individual digits. \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 109\n    }\n  }), \"\\xA0 \\xA0 - Use findCountours() function in OpenCV library to detect separate portion of the image with continuous pixels of the \\xA0 \\xA0 \\xA0 \\xA0 \\xA0\\xA0  same color \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 199\n    }\n  }), \"\\xA0 \\xA0 - Save each number \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 46\n    }\n  }), \" \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 56\n    }\n  })), /*#__PURE__*/React.createElement(Typography, {\n    align: \"left\",\n    variant: \"h6\",\n    className: classes.titleParagraphFormat,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  }, \"Scene Text Recognition:\")));\n};\n\nexport default Proposal;","map":{"version":3,"sources":["/Users/bruceqin/Desktop/CS4476/project-one/src/pages/Proposal/Proposal.js"],"names":["React","Typography","Box","makeStyles","Header","useStyles","theme","wrapper","display","alignItems","flexDirection","paddingTop","link","textDecoration","color","titleFormat","paddingBottom","lateTitleFormat","titleParagraphFormat","fontFamily","boxFormat","width","Proposal","tagChange","classes"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport { Typography, Box } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Header } from '../../components';\n//import { Link } from 'react-router-dom';\n\nconst useStyles = makeStyles((theme) => ({\n    wrapper: {\n        display: 'flex',\n        alignItems: 'center',\n        flexDirection:'column',\n        paddingTop:'20px'\n    },\n    link: {\n        textDecoration: 'none',\n        color: '#000',\n    },\n    titleFormat: {\n        paddingBottom:'10px',\n        textDecoration: \"none\",\n        color:'#212F3C',\n        //fontFamily: '-apple-system',\n    },\n    lateTitleFormat: {\n        paddingTop: '20px',\n        paddingBottom:'10px',\n        textDecoration: \"none\",\n        color:'#212F3C',\n        //fontFamily: '-apple-system',\n    },\n    titleParagraphFormat: {\n        fontFamily: '-apple-system',\n        paddingBottom:'10px',\n    },\n    boxFormat: {\n        width: '80%',\n        paddingBottom:'30px',\n    },\n}));\n\nconst Proposal = ({ tagChange }) => {\n    const classes = useStyles();\n    //const theme = useTheme();\n\n    return (\n        <div className={classes.wrapper}>\n            <Header></Header>\n            <Box className={classes.boxFormat}>\n            <Typography align='center' variant='h4' className={classes.titleFormat}>\n                Problem Statement\n            </Typography>\n            <Typography align='left' variant='subtitle1' className={classes.titleParagraphFormat}>\n            When someone uses our system, they are expected to input images of house numbers displayed on streets. These images should be taken from a camera, or extracted from Google street view, with random background and diverse colors, but have the house numbers locating in the middle. The desired output is the same image with detected house numbers labeled besides the actual house numbers.\n            </Typography>\n            <Typography align='center' variant='h4' className={classes.lateTitleFormat}>\n                Approach\n            </Typography>\n            <Typography align='left' variant='h6' className={classes.titleParagraphFormat}>Image Processing Techniques:</Typography>\n            <Typography align='left' variant='subtitle1' className={classes.titleParagraphFormat}>\n            &nbsp; &nbsp; - Convert the input image into a grayscale image <br></br>\n            &nbsp; &nbsp; - Adjust lighting into desired condition in the image <br></br>\n            &nbsp; &nbsp; - Denoise from the image <br></br>\n            &nbsp; &nbsp; - Use the canny edge detector to detect the edges <br></br>\n            &nbsp; &nbsp; - Normalising intensity of data through mean subtraction <br></br>\n            &nbsp; &nbsp; - Experiment with different types of contrast normalisation (global, local) <br></br> <br></br>\n            </Typography>\n            <Typography align='left' variant='h6' className={classes.titleParagraphFormat}> Scene Text Detection:</Typography>\n            <Typography align='left' variant='subtitle1' className={classes.titleParagraphFormat}>\n            &nbsp; &nbsp; - The dataset comes in two different formats from SVHN: <br></br>\n            &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; - Images with character level bounding boxes <br></br>\n            &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; - 32-by-32 images centered around single character <br></br>\n            &nbsp; &nbsp; - For images that do not have a bounding box, use YOLO to find the text box with a single neural network to predict &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;bounding boxes and label the bounding boxes  <br></br>\n            &nbsp; &nbsp; - After the bounding boxes are determined, crop the image into individual digits. <br></br>\n            &nbsp; &nbsp; - Use findCountours() function in OpenCV library to detect separate portion of the image with continuous pixels of the &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;  same color <br></br>\n            &nbsp; &nbsp; - Save each number <br></br> <br></br>\n            </Typography>\n            <Typography align='left' variant='h6' className={classes.titleParagraphFormat}>Scene Text Recognition:</Typography>\n            </Box>\n        </div>\n    )\n}\n\nexport default Proposal;"]},"metadata":{},"sourceType":"module"}